; ******************************
; * Лабораторная работа N1 *
; * Изучение отладчика AFD *
; ******************************
; ------------------------------
; Примечание: Программа выводит на дисплей сообщение и
; и ожидает нажатия клавиши , код символа
; помещается в регистр AL
; Справка...: DS:DX - адрес строки;
; Функции DOS :
; 09h выдать на дисплей строку,
; 07h ввести символ без эха,
; 4Ch завершить процесс ;
; INT 21h - вызов функции DOS

;имя SEGMENT [READONLY] [выравнивание] [тип] [разрядность] [‘класс’]
; …
;имя ENDS
;описали сегмент стека с именем StkSeg, 
;начинающийся с адреса, кратного 16 байтам,
;тип STACK, класс STACK
;выделили в нем массив из 200h = 512 байт памяти, 
;и заполнили его повторяющимися 
;непроинициализированными значениями
StkSeg			SEGMENT PARA STACK 'STACK' 
				DB 200h DUP (?)
StkSeg 			ENDS

;описали сегмент  данных с именем DataS, 
;начинающийся с адреса, кратного 8 байтам,
;и заполнили его непроиницыализированными значениями
DataS  			SEGMENT WORD 'DATA'
;использовали псевдокоманду:
;их синстаксис имя_переменной d* значение
;описали переменную с именем HelloMessage
;возврат каретки с кодом 13 (0Dh)
;перевод строки с кодом 10 (0Ah).
;Символьная строка, предназначенная для корректного вывода, 
;должна заканчиваться нуль-символом ‘\0’ с кодом, равным 0.
HelloMessage    DB 13               ;курсор поместить в нач. строки
				DB 10               ;перевести курсор на нов. строку
				DB 'Hello, world !' ;текст сообщения
				DB '$'              ;ограничитель для функции DOS
DataS 			ENDS

;описали сегмент  кода с именем Code, 
;начинающийся с адреса, кратного 8 байтам,
Code   			SEGMENT WORD 'CODE'
;assume регистр:связь...
;Директива ASSUME указывает ассемблеру, с каким сегментом или группой
;сегментов связан тот или иной сегментный регистр. В качестве операнда «связь»
;могут использоваться имена сегментов, имена групп, выражения с оператором
;SEG или слово «NOTHING», означающее отмену действия предыдущей ASSUME
;для данного регистра. Эта директива не изменяет значений сегментных регистров, 
;а только позволяет ассемблеру 
;проверять допустимость ссылок и самостоятельно 
;вставлять при необходимости префиксы переопределения сегментов.
				ASSUME CS:Code, DS:DataS
DispMsg:
;Если метка располагается перед командой процессора, сразу после нее всегда
;ставится оператор : (двоеточие), который указывает ассемблеру, что надо создать
;переменную с этим именем, содержащую адрес текущей команды

;загрузка в AX адреса сегмента данных
;Это нужно для того, чтобы убедиться, 
;что адрес был записан в правильном формате с учетом режима сегментации.
				mov AX,DataS               
				mov DS,AX                  ;установка DS
				mov DX,OFFSET HelloMessage ;DS:DX - адрес строки
				mov AH,9                   ;АН=09h выдать на дисплей строку
;int <номер> - вызов (генерация прерывания)
;21h - прерывание DOS, предоставляет прикладным программам около 70 различных функций
;(ввод, вывод, работа с файлами, завершение программы и т.д.)
;Номер функции прерыванию 21h передаётся через регистр AH. Параметры для каждой функции
;передаются собственным способом, он описан в документации. Там же описан способ возврата
;результата из функции в программу.
				int 21h                    ;вызов функции DOS
;Ввод символа без эха (input without echo) означает, 
;что после того, как пользователь введет символ с клавиатуры, 
;этот символ не будет отображаться на экране. 
				mov AH,7                   ;АН=07h ввести символ без эха
				INT 21h                    ;вызов функции DOS
				mov AH,4Ch                 ;АН=4Ch завершить процесс
				int 21h                    ;вызов функции DOS
Code 			ENDS
;END [точка_входа]
;● точка_входа - имя метки, объявленной в сегменте кода и указывающее на команду, с которой
;начнётся исполнение программы.
;● Если в программе несколько модулей, только один может содержать точку входа.
				END DispMsg